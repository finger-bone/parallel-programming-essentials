"use strict";(self.webpackChunknotes_template=self.webpackChunknotes_template||[]).push([[9210],{6036:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"sycl/first-step","title":"First Step into SYCL","description":"This note book provides introduction to parallel programming. Because this book focuses more on the algorithmic aspects of parallel programming, we use SYCL instead of OpenCL or OpenMP because SYCL is a higher level programming model that is easier to understand and use.","source":"@site/docs/sycl/first-step.mdx","sourceDirName":"sycl","slug":"/sycl/first-step","permalink":"/parallel-programming-essentials/docs/sycl/first-step","draft":false,"unlisted":false,"editUrl":"https://github.com/finger-bone/parallel-programming-essentials/blob/main/docs/sycl/first-step.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"SYCL Quickstart","permalink":"/parallel-programming-essentials/docs/category/sycl-quickstart"},"next":{"title":"Memory","permalink":"/parallel-programming-essentials/docs/sycl/memory"}}');var i=t(4848),o=t(8453);const a={sidebar_position:1},c="First Step into SYCL",r={},l=[{value:"What is SYCL?",id:"what-is-sycl",level:2},{value:"Run the First SYCL Program",id:"run-the-first-sycl-program",level:2},{value:"Where Code Executes",id:"where-code-executes",level:2},{value:"Action Graph",id:"action-graph",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",mermaid:"mermaid",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"first-step-into-sycl",children:"First Step into SYCL"})}),"\n",(0,i.jsx)(n.p,{children:"This note book provides introduction to parallel programming. Because this book focuses more on the algorithmic aspects of parallel programming, we use SYCL instead of OpenCL or OpenMP because SYCL is a higher level programming model that is easier to understand and use."}),"\n",(0,i.jsx)(n.h2,{id:"what-is-sycl",children:"What is SYCL?"}),"\n",(0,i.jsx)(n.p,{children:'SYCL is a C++ programming model that enables code for heterogeneous processors to be written in a "single-source" style using completely standard C++.'}),"\n",(0,i.jsx)(n.p,{children:"Compared with OpenCL, SYCL is a bit higher level but very easy to use."}),"\n",(0,i.jsx)(n.p,{children:"SYCL could use OpenCL, CUDA or other backend."}),"\n",(0,i.jsx)(n.h2,{id:"run-the-first-sycl-program",children:"Run the First SYCL Program"}),"\n",(0,i.jsxs)(n.p,{children:["You need to install the oneAPI toolkit. You can download it from the ",(0,i.jsx)(n.a,{href:"https://software.intel.com/content/www/us/en/develop/tools/oneapi/base-toolkit.html",children:"Intel website"}),". Or alternatively, use AdaptiveCPP compiler."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Docker Environment for Mac Users and Lazy People"}),(0,i.jsx)(n.p,{children:"If you are using a Mac like me, unfortunately, the oneAPI DPC++ dropped support for MacOS a while ago. Of course, you can compile and run AdaptiveCpp. But we tool kit from Intel provides more features."}),(0,i.jsx)(n.p,{children:"Of course, you can run linux virtual machine. But an easier approach would be to use docker."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"services:\n  hpc:\n    image: intel/hpckit\n    platform: linux/amd64\n    volumes:\n      - ./code:/code\n    stdin_open: true\n    tty: true\n    command: /bin/bash\n"})}),(0,i.jsx)(n.p,{children:"Then you can attach vscode to the docker and use it as your environment (Yes, Rosetta is that magical)."})]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["If you have issue with your editor, please make sure to enable ",(0,i.jsx)(n.code,{children:"-fsycl"})," flag, include the headers, and select the correct compiler. The folowing is an example for vscode."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "configurations": [\n        {\n            "name": "Linux",\n            "includePath": [\n                "${workspaceFolder}/**",\n                "/opt/intel/oneapi/dpl/2022.6/include/pstl_offload"\n            ],\n            "defines": [],\n            "compilerArgs": [\n                "-fsycl"\n            ],\n            "compilerPath": "/opt/intel/oneapi/compiler/2024.2/bin/icpx",\n            "intelliSenseMode": "linux-gcc-x64"\n        }\n    ],\n    "version": 4\n}\n'})})]}),"\n",(0,i.jsx)(n.p,{children:"We write our first program as a demonstration. You don't need to understand any of the code. Just copy paste and run it."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\n#include <sycl/sycl.hpp>\n\nclass vector_addition;\n\nint main(int, char**) {\n    sycl::float4 a = { 1.0, 2.0, 3.0, 4.0 };\n    sycl::float4 b = { 4.0, 3.0, 2.0, 1.0 };\n    sycl::float4 c = { 0.0, 0.0, 0.0, 0.0 };\n\n    auto device_selector = sycl::default_selector_v;\n\n    sycl::queue queue(device_selector);\n    \n    std::cout << "Running on: "\n              << queue.get_device().get_info<sycl::info::device::name>()\n              << "\\n";\n\n    {\n        sycl::buffer<sycl::float4, 1> a_sycl(&a, sycl::range<1>(1));\n        sycl::buffer<sycl::float4, 1> b_sycl(&b, sycl::range<1>(1));\n        sycl::buffer<sycl::float4, 1> c_sycl(&c, sycl::range<1>(1));\n\n        queue.submit([&] (sycl::handler& cgh) {\n            auto a_acc = a_sycl.get_access<sycl::access::mode::read>(cgh);\n            auto b_acc = b_sycl.get_access<sycl::access::mode::read>(cgh);\n            auto c_acc = c_sycl.get_access<sycl::access::mode::discard_write>(cgh);\n\n            cgh.single_task<class vector_addition>([=] () {\n                c_acc[0] = a_acc[0] + b_acc[0];\n            });\n        });\n    }\n    std::cout << "  A { " << a.x() << ", " << a.y() << ", " << a.z() << ", " << a.w() << " }\\n"\n              << "+ B { " << b.x() << ", " << b.y() << ", " << b.z() << ", " << b.w() << " }\\n"\n              << "==================\\n"\n              << "= C { " << c.x() << ", " << c.y() << ", " << c.z() << ", " << c.w() << " }"\n              << std::endl;\n\n    return 0;\n}\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.p,{children:"Just in case you don't know C++ closure, here is a brief introduction."}),(0,i.jsx)(n.p,{children:"Closure, also called lambda function, is a nameless function that is capable of capturing the variable of its parent scope."}),(0,i.jsx)(n.p,{children:"The syntax is,"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"[ capture-list ] ( parameters ) -> return-type { body }\n"})}),(0,i.jsx)(n.p,{children:"For example,"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"void foo() {\n    int x = 0;\n\n    auto bar = [x] (int v) {\n        return x + v;\n    };\n\n    int a = bar(1);\n}\n"})}),(0,i.jsxs)(n.p,{children:["The variable ",(0,i.jsx)(n.code,{children:"x"})," is captured by the lambda function."]}),(0,i.jsx)(n.p,{children:"Except for the capture list, the lambda function is identical to a normal function."}),(0,i.jsxs)(n.p,{children:["The external variable can either be captured by value or reference. If there is no prefix, for example, ",(0,i.jsx)(n.code,{children:"[x]"}),", it is capture by value. If there is an ampersand, like ",(0,i.jsx)(n.code,{children:"[&x]"}),", it is capture by reference."]}),(0,i.jsxs)(n.p,{children:["If you have too many parameters, you can use, ",(0,i.jsx)(n.code,{children:"[=]"})," to automatically capture all the variables by value, or ",(0,i.jsx)(n.code,{children:"[&]"})," by reference."]})]}),"\n",(0,i.jsx)(n.p,{children:"Use the command,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"icpx -fsycl ./first_step.cc\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To compile. ",(0,i.jsx)(n.code,{children:"icpx"})," is the Intel compiler. ",(0,i.jsx)(n.code,{children:"-fsycl"})," is the flag to enable SYCL. The output is ",(0,i.jsx)(n.code,{children:"a.out"}),". Run it with ",(0,i.jsx)(n.code,{children:"./a.out"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"You should see the output,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Running on: VirtualApple @ 2.50GHz\n  A { 1, 2, 3, 4 }\n+ B { 4, 3, 2, 1 }\n==================\n= C { 5, 5, 5, 5 }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Running on: VirtualApple @ 2.50GHz"})," is the name of the device. It may vary depending on the device you are using."]}),"\n",(0,i.jsx)(n.p,{children:"If you ever learnt OpenCL before, you will find the code soothing- not as scary as OpenCL."}),"\n",(0,i.jsx)(n.h2,{id:"where-code-executes",children:"Where Code Executes"}),"\n",(0,i.jsx)(n.p,{children:"Unlike OpenCL, SYCL uses a single source. So you should be clear about where your code is running on- by that, we mean, if it is running on your host computer, or the device."}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"By the host computer, we mean the, well, physical computer you are using. By the device, we mean a part of your computer that is capable of large parallel computation. Typically, it is GPU. But if, for example, you are using Xeon-level processors, the host and device may be the same."}),(0,i.jsx)(n.p,{children:"In the following parts of this note, a device always refer to the device that handles large parallel computation."})]}),"\n",(0,i.jsx)(n.p,{children:"The host interacts with the device via command queues. This is a queue on the device that stores commands. The host can submit commands to the queue, and the device will execute them in order."}),"\n",(0,i.jsx)(n.p,{children:"Again, SYCL is single source, thus you must know where your code is going. It is simple: If you are using SYCL specific API to order the device to do something, then it is device code. Otherwise, it is host code."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"// host code\n\ndevice.submit([&] (sycl::handler& cgh) {\n    cgh.host_task([=] () {\n        // host code\n    });\n});\n\ndevice.submit([&] (sycl::handler& cgh) {\n    // host code\n    cgh.parallel_for<class my_kernel>(range, [=] (sycl::id<1> idx) {\n        // device code\n    });\n});\n\n// host code\n"})}),"\n",(0,i.jsx)(n.mermaid,{value:"graph LR\n    A[SYCL Code] --\x3e|Host Code| B[Executed by the Host]\n    A --\x3e|Device Code| D[Command Queue]\n    D --\x3e E[Executed By Device]"}),"\n",(0,i.jsx)(n.p,{children:"Device code are executed asynchronously from the host code. Thus you need synchronization if you need the result."}),"\n",(0,i.jsx)(n.p,{children:"Host code and device code are fundamentally different. If you ever learnt OpenCL, you can tell that. Thanks to the job done by SYCL dev team, we can write modern C++ for device code. And albeit it runs, you should not use things like dynamic memory allocation, exceptions, etc. in device code. Because most of the time, the device is something like GPU that doesn't support these features."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"When we debug, we usually choose CPU as the device because debugging on CPU is much easier than debugging on GPU."})}),"\n",(0,i.jsxs)(n.p,{children:["A command queue can be bind to a single device, but it can also be bind to multiple. We typically only select one device for a queue. When constructing the queue, use the ",(0,i.jsx)(n.code,{children:"sycl::default_selector_v"})," as we did in the first program. It will select the default device. You can also use ",(0,i.jsx)(n.code,{children:"sycl::cpu_selector_v"})," or ",(0,i.jsx)(n.code,{children:"sycl::gpu_selector_v"})," to select CPU or GPU."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"auto device_selector = sycl::default_selector_v;\nsycl::queue queue{device_selector};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"action-graph",children:"Action Graph"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"queue.submit"}),", the closure is called a command group. The command group is a lambda function that takes a ",(0,i.jsx)(n.code,{children:"sycl::handler"})," as an argument. The handler is used to specify the data dependency and the access mode of the buffer."]}),"\n",(0,i.jsxs)(n.p,{children:["For each command group, there can be at most one call to the device. That is, you can use host code to prepare the data in the ",(0,i.jsx)(n.code,{children:"queue.submit"}),", but you can upmost call the device once- or you can fill it with host code."]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"There are two types of action that will require device code. Either direct device code execution, or explicit memory operation that moves data between host and device."}),(0,i.jsx)(n.p,{children:"Common ones include,"}),(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Work Type"}),(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Summary"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Device code execution"}),(0,i.jsx)(n.td,{children:"single_task"}),(0,i.jsx)(n.td,{children:"Execute a single instance of a device function."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Device code execution"}),(0,i.jsx)(n.td,{children:"parallel_for"}),(0,i.jsx)(n.td,{children:"Multiple forms are available to launch device code with different combinations of work sizes."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Explicit memory operation"}),(0,i.jsx)(n.td,{children:"copy"}),(0,i.jsx)(n.td,{children:"Copy data between locations specified by accessor, pointer, and/or shared_ptr. The copy occurs as part of the SYCL task graph (described later), including dependence tracking."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Explicit memory operation"}),(0,i.jsx)(n.td,{children:"update_host"}),(0,i.jsx)(n.td,{children:"Trigger update of host data backing of a buffer object."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Explicit memory operation"}),(0,i.jsx)(n.td,{children:"fill"}),(0,i.jsx)(n.td,{children:"Initialize data in a buffer to a specified value."})]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Because each command group can only have one device call, we usually call the device multiple times so that we can complete a task. This require us to manage and schedule all the actions."}),"\n",(0,i.jsx)(n.p,{children:"SYCL uses a directed acyclic graph (DAG) to schedule the actions and deal with data dependencies. This is called an action graph. Please note that the action can be either host code or device code. For example,"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph LR\n    A[Prepare the Data] --\x3e B[Copy the Data to Device]\n    B --\x3e C\n    B --\x3e E\n    C[Do Compute on the Device] --\x3e D[Copy the Data Back to Host]\n    E[Do Another Compute on the Device] --\x3e D"}),"\n",(0,i.jsx)(n.p,{children:"To construct such a graph in code, we use the typical async-await pattern, except that the name is event-wait."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"queue.submit"})," will return an ",(0,i.jsx)(n.code,{children:"event"})," object (but you should receive it using ",(0,i.jsx)(n.code,{children:"auto"})," because the type is long)."]}),"\n",(0,i.jsxs)(n.p,{children:["When you create another command group, you can use ",(0,i.jsx)(n.code,{children:"h.depends_on(e)"})," to specify that the new command group depends on the previous one."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <sycl/sycl.hpp>\n#include <iostream>\n#include <array>\nusing namespace sycl;\nconstexpr int N = 4;\n\nint main() {\n    queue q;\n    int* A = malloc_shared<int>(N, q);\n\n    std::cout << "Selected device: "\n              << q.get_device().get_info<info::device::name>() << "\\n";\n\n    // Initialize values in the shared allocation\n    auto eA = q.submit([&](handler& h) {\n        h.parallel_for(N, [=](auto& idx) { A[idx] = idx; });\n    });\n\n    // Use a host task to output values on the host as part of\n    // task graph. depends_on is used to define a dependence\n    // on previous device code having completed. Here the host\n    // task is defined as a lambda expression.\n    q.submit([&](handler& h) {\n        h.depends_on(eA);\n        h.host_task([=]() {\n            for (int i = 0; i < N; i++)\n                std::cout << "host_task @ " << i << " = " << A[i] << "\\n";\n        });\n    });\n\n    // Wait for work to be completed in the queue before\n    // accessing the shared data in the host program.\n    q.wait();\n\n    for (int i = 0; i < N; i++)\n        std::cout << "main @ " << i << " = " << A[i] << "\\n";\n\n    free(A, q);\n    return 0;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Lastly, if we want the SYCL to finish all the work. We use ",(0,i.jsx)(n.code,{children:"q.wait()"}),", so that we can eventually get the result."]}),"\n",(0,i.jsx)(n.p,{children:"When writing SYCL code, you should always keep in mind that the code is running asynchronously."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);